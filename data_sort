from importlib.resources import path
import pandas as pd
import numpy as np
import datetime

parent_folder = os.path.dirname(path)
NAO_file_path = "Data/nao.reanalysis.t10trunc.1948-present.txt"
PNA_file_path = "Data/pna.reanalysis.t10trunc.1948-present.txt"
SOI_file_path = "Data/SOIdata"
AO_file_path = "Data/AOdata"
Sounding_filepath_1 = "Data/CAM00071867-data.txt" # The PAS, UA, CAN
Sounding_filepath_2 = "Data/CAM00071109-data.txt" # Port Hardy, UA, CAN
Sounding_filepath_3 = "Data/USM00072206-data.txt" ###Jacksonville, FL. There's a lot of missing days. Needs to be QCed
Sounding_filepath_4 = "Data/USM00072381-data.txt" ##Edwards AFB, CA. Small sample size
Sounding_filepath_5 = "Data/USM00072456-data.txt" #Topeka, KS

Station_data_file_path = "Data/KIAD_Station_data.txt" # Data/KIAD_Station_data.txt  Data/LouisvilleDailyWxSummary.csv Data/KNGU_station_data.txt

Target_Value = "TMAX" #Target_Value is the parameter you want to predict. Can be 'TAVG', 'TMAX', 'TMIN'
######### Reading in Data Files  ##############################
#Data Column is right justified so skipinitialspace must be set to true
observation_start_date = pd.to_datetime("1965-4-1") #for if the observation begins at any other time than the beginning of the dataset
target_forecast = 30
sounding_level = 50000 #in pascals
sounding_data_type_1 = 3 #3 = geopotential height, 4 = temperature, 5 = relative humidity
sounding_data_type_2 = 4 #3 = geopotential height, 4 = temperature, 5 = relative humidity
sounding_data_type_3 = 5 #3 = geopotential height, 4 = temperature, 5 = relative humidity

def sounding_entry(filepath, parameter, height):
    with open(filepath) as f:
        sounding_lines = f.readlines()
    f.close

    sounding_array = []
    date_index = []
    skipped = False
    desired_sounding = False
    for _, line in enumerate(sounding_lines):
        date_line = line.split()            
                   
        if date_line[0][0] == "#" and date_line[4] == "12":
            if skipped:             ## For error correction. If the previous sounding did not have the associated px level
                date_index.pop()    ## it will discard that date so dates and data remain aligned
            
            date = datetime.datetime(int(date_line[1]), int(date_line[2]), int(date_line[3]))
            date_index.append(date)
            desired_sounding = True
            skipped = True
        elif date_line[0][0] == "#":
            desired_sounding = False
        if desired_sounding:
            line = line.replace("A", " ")
            line = line.replace("B", " ")
            # line = line.replace("\n", " ")
            line = line.split()
            if float(line[2]) == height:
                sounding_array.append(float(line[parameter]))
                skipped = False
        
    date_index = pd.DatetimeIndex(date_index)
    return pd.DataFrame(sounding_array, index= date_index, columns=["Sounding Data"]) #NTS change return to dataframe



raw_NAO_data = pd.read_csv(NAO_file_path, 
                           names = ("Year", "Month", "Day", "Data"), 
                           sep = " ", 
                           dtype = {"Data":np.float64}, 
                           skipinitialspace = True)

raw_PNA_data = pd.read_csv(PNA_file_path, 
                           names = ("Year", "Month", "Day", "Data"), 
                           sep = " ", 
                           dtype = {"Data":np.float64}, 
                           skipinitialspace = True)

raw_SOI_data = pd.read_csv(SOI_file_path, 
                           names = ("Date", "Data"), 
                           sep = ",", 
                           dtype = {"Data":np.float64})

raw_AO_data = pd.read_csv(AO_file_path, 
                           names = ("Date", "Data"), 
                           sep = ",", 
                           dtype = {"Data":np.float64})

raw_Station_data = pd.read_csv(Station_data_file_path)


Station_dates= pd.to_datetime(raw_Station_data["DATE"])



Station_data = pd.DataFrame(raw_Station_data[[Target_Value]].values,  columns = [Target_Value], index = Station_dates)

#print(Station_data.head)
#Station_dates = pd.DatetimeIndex(pd.to_datetime())

NAO_dates = pd.DatetimeIndex(pd.to_datetime(raw_NAO_data[["Year", "Month", "Day"]]))

NAO_data =pd.DataFrame(raw_NAO_data[["Data"]].values, columns = ["NAO"], index = NAO_dates)

PNA_dates = pd.DatetimeIndex(pd.to_datetime(raw_PNA_data[["Year", "Month", "Day"]]))

PNA_data =pd.DataFrame(raw_PNA_data[["Data"]].values, columns = ["PNA"], index = PNA_dates)

SOI_dates = pd.to_datetime(raw_SOI_data["Date"].values.flatten(), format = '%Y%m')

SOI_data = pd.DataFrame(raw_SOI_data[["Data"]].values, columns = ['SOI'], index = SOI_dates)


start_date = SOI_data.index.min()- pd.DateOffset(day=1)
end_date = SOI_data.index.max() + pd.DateOffset(day=31)
dates = pd.date_range(start_date, end_date, freq = 'D')

SOI_data = SOI_data.reindex(dates, method = 'ffill')
#print(SOI_data.head)

AO_dates = pd.to_datetime(raw_AO_data["Date"].values.flatten(), format = '%Y%m')

AO_data = pd.DataFrame(raw_AO_data[["Data"]].values, columns = ['AO'], index = AO_dates)

start_date = AO_data.index.min()- pd.DateOffset(day=1)
end_date = AO_data.index.max() +pd.DateOffset(day=31)
dates = pd.date_range(start_date, end_date, freq = 'D')

AO_data = AO_data.reindex(dates, method = 'ffill')


merged_data = PNA_data.merge(NAO_data, left_index = True, right_index = True)

merged_data = merged_data.merge(SOI_data, left_index = True, right_index = True)
merged_data = merged_data.merge(AO_data, left_index = True, right_index = True)
merged_data = merged_data.merge(Station_data, left_index = True, right_index=True)#, how = "left")
###Sounding Pressure entry
merged_data = merged_data.merge(sounding_entry(Sounding_filepath_1, sounding_data_type_1, 70000), left_index = True, right_index=True)
merged_data = merged_data.merge(sounding_entry(Sounding_filepath_2, sounding_data_type_1, 70000), left_index = True, right_index=True)
# # #merged_data = merged_data.merge(sounding_entry(Sounding_filepath_3, sounding_data_type, sounding_level), left_index = True, right_index=True)
#merged_data = merged_data.merge(sounding_entry(Sounding_filepath_4, sounding_data_type, sounding_level), left_index = True, right_index=True)
merged_data = merged_data.merge(sounding_entry(Sounding_filepath_5, sounding_data_type_1, 70000), left_index = True, right_index=True)
###SOunding Temperature entry
merged_data = merged_data.merge(sounding_entry(Sounding_filepath_1, sounding_data_type_2, 70000), left_index = True, right_index=True)
merged_data = merged_data.merge(sounding_entry(Sounding_filepath_2, sounding_data_type_2, 70000), left_index = True, right_index=True)
merged_data = merged_data.merge(sounding_entry(Sounding_filepath_5, sounding_data_type_2, 70000), left_index = True, right_index=True)
###Sounding Relative Humidity Entry
merged_data = merged_data.merge(sounding_entry(Sounding_filepath_1, sounding_data_type_3, 70000), left_index = True, right_index=True)
merged_data = merged_data.merge(sounding_entry(Sounding_filepath_2, sounding_data_type_3, 70000), left_index = True, right_index=True)
merged_data = merged_data.merge(sounding_entry(Sounding_filepath_5, sounding_data_type_3, 70000), left_index = True, right_index=True)

###Sounding Pressure entry
merged_data = merged_data.merge(sounding_entry(Sounding_filepath_1, sounding_data_type_1, 50000), left_index = True, right_index=True)
merged_data = merged_data.merge(sounding_entry(Sounding_filepath_2, sounding_data_type_1, 50000), left_index = True, right_index=True)
# # #merged_data = merged_data.merge(sounding_entry(Sounding_filepath_3, sounding_data_type, sounding_level), left_index = True, right_index=True)
#merged_data = merged_data.merge(sounding_entry(Sounding_filepath_4, sounding_data_type, sounding_level), left_index = True, right_index=True)
merged_data = merged_data.merge(sounding_entry(Sounding_filepath_5, sounding_data_type_1, 50000), left_index = True, right_index=True)
###SOunding Temperature entry
merged_data = merged_data.merge(sounding_entry(Sounding_filepath_1, sounding_data_type_2, 50000), left_index = True, right_index=True)
merged_data = merged_data.merge(sounding_entry(Sounding_filepath_2, sounding_data_type_2, 50000), left_index = True, right_index=True)
merged_data = merged_data.merge(sounding_entry(Sounding_filepath_5, sounding_data_type_2, 50000), left_index = True, right_index=True)
###Sounding Relative Humidity Entry
merged_data = merged_data.merge(sounding_entry(Sounding_filepath_1, sounding_data_type_3, 50000), left_index = True, right_index=True)
merged_data = merged_data.merge(sounding_entry(Sounding_filepath_2, sounding_data_type_3, 50000), left_index = True, right_index=True)
merged_data = merged_data.merge(sounding_entry(Sounding_filepath_5, sounding_data_type_3, 50000), left_index = True, right_index=True)

###Sounding Pressure entry
merged_data = merged_data.merge(sounding_entry(Sounding_filepath_1, sounding_data_type_1, 20000), left_index = True, right_index=True)
merged_data = merged_data.merge(sounding_entry(Sounding_filepath_2, sounding_data_type_1, 20000), left_index = True, right_index=True)
# # #merged_data = merged_data.merge(sounding_entry(Sounding_filepath_3, sounding_data_type, sounding_level), left_index = True, right_index=True)
#merged_data = merged_data.merge(sounding_entry(Sounding_filepath_4, sounding_data_type, sounding_level), left_index = True, right_index=True)
merged_data = merged_data.merge(sounding_entry(Sounding_filepath_5, sounding_data_type_1, 20000), left_index = True, right_index=True)
###SOunding Temperature entry
merged_data = merged_data.merge(sounding_entry(Sounding_filepath_1, sounding_data_type_2, 20000), left_index = True, right_index=True)
merged_data = merged_data.merge(sounding_entry(Sounding_filepath_2, sounding_data_type_2, 20000), left_index = True, right_index=True)
merged_data = merged_data.merge(sounding_entry(Sounding_filepath_5, sounding_data_type_2, 20000), left_index = True, right_index=True)
###Sounding Relative Humidity Entry
merged_data = merged_data.merge(sounding_entry(Sounding_filepath_1, sounding_data_type_3, 20000), left_index = True, right_index=True)
merged_data = merged_data.merge(sounding_entry(Sounding_filepath_2, sounding_data_type_3, 20000), left_index = True, right_index=True)
merged_data = merged_data.merge(sounding_entry(Sounding_filepath_5, sounding_data_type_3, 20000), left_index = True, right_index=True)

cleaned_data = merged_data.interpolate()
cleaned_data["MONTH"] = cleaned_data.index.month
cleaned_data[Target_Value +"_forecast"] = cleaned_data.shift(target_forecast)[Target_Value]
# cleaned_data["NAO_rate"] = (cleaned_data.shift(1)["NAO"] - cleaned_data.shift(-1)["NAO"])/2
# cleaned_data["AO_rate"] = (cleaned_data.shift(1)["AO"] - cleaned_data.shift(-1)["AO"])/2
# cleaned_data["PNA_rate"] = (cleaned_data.shift(1)["PNA"] - cleaned_data.shift(-1)["PNA"])/2
# cleaned_data["SOI_rate"] = (cleaned_data.shift(1)["SOI"] - cleaned_data.shift(-1)["SOI"])/2
# test_set, train_set = split_train(cleaned_data, .2)

cleaned_data.drop(index = cleaned_data.index[:target_forecast],axis = 0, inplace=True)
cleaned_data.drop(index = cleaned_data.index[-1],axis = 0, inplace=True)


model_labels = cleaned_data[Target_Value+"_forecast"].copy()
model_data = cleaned_data.copy()
model_data  = model_data.drop(Target_Value+"_forecast", axis=1) #for when predicting the current day temps based only on teleconnections

model_data.to_pickle("./model_data.pkl")
model_labels.to_pickle("./model_labels.pkl")